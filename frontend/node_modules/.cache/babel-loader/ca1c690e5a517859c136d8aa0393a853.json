{"ast":null,"code":"import { createSlice, createAsyncThunk, createEntityAdapter, createSelector } from '@reduxjs/toolkit';\nimport store from '../../store';\nexport const fetchUniquePost = createAsyncThunk('/post/fetchUniquePost', async id => {\n  let output;\n  await fetch(`http://127.0.0.1:4000/db/getUniquePost?id=${id}`).then(res => res.json()).then(data => {\n    output = data;\n  });\n  return {\n    'id': output._id,\n    ...output\n  };\n});\nconst postAdapter = createEntityAdapter();\nconst initialState = postAdapter.getInitialState({});\nconst postSlice = createSlice({\n  name: 'post',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchUniquePost.fulfilled, (state, action) => {\n      postAdapter.setOne(state, action.payload);\n    });\n  }\n});\nexport default postSlice.reducer;\nconsole.log(store.getState());\nexport const {\n  selectAll: selectPosts\n} = postAdapter.getSelectors(state => state.post);\nexport const selectId = createSelector(selectPosts, data => {\n  return data.map(post => post._id);\n});","map":{"version":3,"names":["createSlice","createAsyncThunk","createEntityAdapter","createSelector","store","fetchUniquePost","id","output","fetch","then","res","json","data","_id","postAdapter","initialState","getInitialState","postSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","action","setOne","payload","reducer","console","log","getState","selectAll","selectPosts","getSelectors","post","selectId","map"],"sources":["/home/snow/programming/blog-mc/frontend/src/components/post/postSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk, createEntityAdapter, createSelector } from '@reduxjs/toolkit';\n\nimport store from '../../store';\n\nexport const fetchUniquePost = createAsyncThunk('/post/fetchUniquePost', async(id) => {\n    let output;\n    await fetch(`http://127.0.0.1:4000/db/getUniquePost?id=${id}`).then(res => res.json()).then((data) => {\n        output = data\n    })\n    return {'id': output._id, ...output}\n})\n\nconst postAdapter = createEntityAdapter()\nconst initialState = postAdapter.getInitialState({})\n\nconst postSlice = createSlice({\n    name: 'post',\n    initialState,\n    reducers : {\n    }, extraReducers: (builder) => {\n        builder\n            .addCase(fetchUniquePost.fulfilled, (state, action) => {\n                postAdapter.setOne(state, action.payload)\n            })\n    }\n})\n\nexport default postSlice.reducer\n\nconsole.log(store.getState())\n\n\nexport const { selectAll: selectPosts } = postAdapter.getSelectors((state) => state.post)\n\nexport const selectId = createSelector(selectPosts, (data) => {\n    return data.map((post) => post._id)\n})"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,EAAwCC,mBAAxC,EAA6DC,cAA7D,QAAmF,kBAAnF;AAEA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAO,MAAMC,eAAe,GAAGJ,gBAAgB,CAAC,uBAAD,EAA0B,MAAMK,EAAN,IAAa;EAClF,IAAIC,MAAJ;EACA,MAAMC,KAAK,CAAE,6CAA4CF,EAAG,EAAjD,CAAL,CAAyDG,IAAzD,CAA8DC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAArE,EAAiFF,IAAjF,CAAuFG,IAAD,IAAU;IAClGL,MAAM,GAAGK,IAAT;EACH,CAFK,CAAN;EAGA,OAAO;IAAC,MAAML,MAAM,CAACM,GAAd;IAAmB,GAAGN;EAAtB,CAAP;AACH,CAN8C,CAAxC;AAQP,MAAMO,WAAW,GAAGZ,mBAAmB,EAAvC;AACA,MAAMa,YAAY,GAAGD,WAAW,CAACE,eAAZ,CAA4B,EAA5B,CAArB;AAEA,MAAMC,SAAS,GAAGjB,WAAW,CAAC;EAC1BkB,IAAI,EAAE,MADoB;EAE1BH,YAF0B;EAG1BI,QAAQ,EAAG,EAHe;EAIvBC,aAAa,EAAGC,OAAD,IAAa;IAC3BA,OAAO,CACFC,OADL,CACajB,eAAe,CAACkB,SAD7B,EACwC,CAACC,KAAD,EAAQC,MAAR,KAAmB;MACnDX,WAAW,CAACY,MAAZ,CAAmBF,KAAnB,EAA0BC,MAAM,CAACE,OAAjC;IACH,CAHL;EAIH;AATyB,CAAD,CAA7B;AAYA,eAAeV,SAAS,CAACW,OAAzB;AAEAC,OAAO,CAACC,GAAR,CAAY1B,KAAK,CAAC2B,QAAN,EAAZ;AAGA,OAAO,MAAM;EAAEC,SAAS,EAAEC;AAAb,IAA6BnB,WAAW,CAACoB,YAAZ,CAA0BV,KAAD,IAAWA,KAAK,CAACW,IAA1C,CAAnC;AAEP,OAAO,MAAMC,QAAQ,GAAGjC,cAAc,CAAC8B,WAAD,EAAerB,IAAD,IAAU;EAC1D,OAAOA,IAAI,CAACyB,GAAL,CAAUF,IAAD,IAAUA,IAAI,CAACtB,GAAxB,CAAP;AACH,CAFqC,CAA/B"},"metadata":{},"sourceType":"module"}